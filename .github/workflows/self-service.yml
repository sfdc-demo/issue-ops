name: issue-ops / self-service

on:
  issues:
    types:
      - opened

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3


      - name: get issue labels
        uses: actions/github-script@v6
        id: issue-labels
        with:
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            return issue.data.labels.map(label => label.name);
          result-encoding: string


      # parse the issue template into a json object
      - name: parse issue input
        uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/${{ steps.issue-labels.outputs.result }}.yml


      # this step will validate that required fields are present in the issue body
      - name: validate required form entries
        id: validate-required-keys
        run: |
          echo "FORM_VALIDATION=$(python .github/scripts/validate_required_keys.py \
            --required_keys_file=.github/ISSUE_TEMPLATE_REQUIRED_KEYS/${{ steps.issue-labels.outputs.result }}.yml \
            --json_file=${HOME}/issue-parser-result.json)" >> $GITHUB_OUTPUT


      # if the validation step above fails, this step will update the issue with a message indicating the missing or wrong fields
      - name: update issue with form validation failure message
        if: steps.validate-required-keys.outputs.result != ''
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = context.issue.number;
            const errors = ${{ toJSON(steps.validate-required-keys.outputs.form_validation) }};
            const failureMessage = 'Validation failed. This likely means you are missing a required form field.\n\n```json\n' + errors + '\n```\n';
            await github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: failureMessage,
            });
            core.setFailed('Form is missing required fields/keys')


      # this step will validate that the user has the required role to perform the operation
      - name: validate role and permissions
        id: validate-permissions
        run: |
          echo "PERMISSION_VALIDATION=$(python .github/scripts/validate_role.py \
            --github_instance=${{ steps.issue-parser.outputs.issueparser_instance }} \
            --organization=${{ steps.issue-parser.outputs.issueparser_organization }} \
            --user=${{ github.actor }})" >> $GITHUB_OUTPUT


      # this step will update the issue with a message indicating the user does not have permissions to perform the operation
      - name: update issue with role validation failure message
        if: steps.validate-permissions.outputs.result != ''
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = context.issue.number;
            const errors = ${{ toJSON(steps.validate-permissions.outputs.permission_validation) }};
            const failureMessage = 'Validation failed. You do not have the access required to perform this operation.\n\n```json\n' + errors + '\n```\n';
            await github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: failureMessage,
            });
            core.setFailed('User/Role is missing required access')


      - name: set instance hostname for authentication
        id: set-instance-hostname
        run: |
          echo "HOSTNAME=$(python .github/scripts/set_hostname.py \
            --yaml=.github/PERMISSIONS/github.yml \
            --json=${HOME}/issue-parser-result.json)" >> $GITHUB_OUTPUT


      - name: login with gh cli
        run: |
          echo ${{ secrets[format('{0}_TOKEN', steps.issue-parser.outputs.issueparser_instance)] }} > token.txt
          gh auth login \
          --hostname ${{ steps.set-instance-hostname.outputs.hostname }} \
          --with-token < token.txt


      - name: Create organization webhook
        run: |
          EVENTS_JSON=$(echo "${{ steps.issue-parser.outputs.issueparser_events }}" | jq -R 'split(",")')
          gh api orgs/${{ steps.issue-parser.outputs.issueparser_organization }}/hooks  \
            --input - <<< '{
              "name": "web",
              "active": true,
              "events": [${{ toJSON(join(steps.issue-parser.outputs.issueparser_events, ',')) }}],
              "config": {
                "url": "${{ steps.issue-parser.outputs.issueparser_payload_url }}",
                "content_type": "${{ steps.issue-parser.outputs.issueparser_content_type }}""
              }
            }'