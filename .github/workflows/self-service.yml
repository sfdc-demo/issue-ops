name: issue-ops / self-service

on:
  issues:
    types:
      - opened

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # we use issue labels to determine the type of issue throughtout the workflow
      - name: get issue labels
        uses: actions/github-script@v6
        id: get-issue-labels
        with:
          script: |
            const issueNumber = ${{ github.event.inputs.issueNumber }};
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            return issue.data.labels.map(label => label.name);
          result-encoding: string

      - name: parse and validate issue type from labels
        id: issue-type
        run: |
           echo "${{ steps.get-labels.outputs.result }}"

      - name: parse issue input
        uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/org-webhook.yml


      - name: set env vars
        run: |
          echo 'cat ${HOME}/issue-parser-result.json \
          | python .github/scripts/set_env_vars.py >> $GITHUB_ENV'


      - run: cat ${HOME}/issue-parser-result.json
      - run: printenv 


      - name: validate required form entries
        id: validate_required_keys
        run: |
          # sets environment variable VALIDATION_OUTPUT to empty string if
          # validation passes or a json string of errors if validation fails

          echo "FORM_VALIDATION=$(python .github/scripts/validate_required_keys.py \
            --required_keys_file=.github/ISSUE_TEMPLATE_REQUIRED_KEYS/org-webhook.yml \
            --json_file=${HOME}/issue-parser-result.json)" >> $GITHUB_ENV


      - name: update issue with form validation failure message
        if: env.FORM_VALIDATION != ''
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = context.issue.number;
            const errors = JSON.stringify(JSON.parse(process.env.FORM_VALIDATION), null, 2);
            const failureMessage = 'Validation failed. This likely means you are missing a required form field.\n\n```json\n' + errors + '\n```\n';
            await github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: failureMessage,
            });
            core.setFailed('Form is missing required fields/keys')


      - name: validate role
        env:
          INSTANCE: ${{ steps.issue-parser.outputs.issueparser_instance }}
          ORGANIZATION: ${{ steps.issue-parser.outputs.issueparser_organization }}
        run: |
          echo "ROLE_VALIDATION=$(python .github/scripts/validate_role.py \
            --github_instance=$INSTANCE \
            --organization=$ORGANIZATION \
            --user=${{ github.actor }})" >> $GITHUB_ENV


      - name: update issue with role validation failure message
        if: env.ROLE_VALIDATION != ''
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = context.issue.number;
            const errors = JSON.stringify(JSON.parse(process.env.ROLE_VALIDATION), null, 2);
            const failureMessage = 'Validation failed. You do not have the access required to perform this operation.\n\n```json\n' + errors + '\n```\n';
            await github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: failureMessage,
            });
            core.setFailed('User/Role is missing required access')


      # - name: create JSON payload for workload
      #   id: create_payload
      #   run: |
      #     echo "PAYLOAD=$(python .github/scripts/create_payload.py \
      #       --github_yaml=.github/PERMISSIONS/github.yml \
      #       --user=${{ github.actor }} \
      #       --issue_json=${HOME}/issue-parser-result.json \
      #       --issue_number=${{ github.event.issue.number }} \
      #       --issue_title='${{ github.event.issue.title }}')" >> $GITHUB_ENV


      - name: set hostname
        run: |
          echo "HOSTNAME=$(python .github/scripts/set_hostname.py \
            --yaml=.github/PERMISSIONS/github.yml \
            --json=${HOME}/issue-parser-result.json)" >> $GITHUB_ENV


      - name: login with gh cli
        run: |
          echo ${{ secrets[format('{0}_TOKEN', steps.issue-parser.outputs.issueparser_instance)] }} > token.txt
          gh auth login \
          --hostname ${{ env.HOSTNAME }} \
          --with-token < token.txt

      - name: Create organization webhook
        env:
          ORGANIZATION: ${{ steps.issue-parser.outputs.issueparser_organization }}
          PAYLOAD_URL: ${{ steps.issue-parser.outputs.issueparser_payload_url }}
          CONTENT_TYPE: ${{ steps.issue-parser.outputs.issueparser_content_type }}
          EVENTS: ${{ steps.issue-parser.outputs.issueparser_events }}
        run: |
          gh api orgs/${{ env.ORGANIZATION }}/hooks  \
            --input - <<< '{
              "name": "web",
              "active": true,
              "events": [
                "watch"
              ],
              "config": {
                "url": "${{ env.PAYLOAD_URL }}",
                "content_type": "json"
              }
            }'